// Generated by rstantools.  Do not edit by hand.

/*
    phylopairs is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    phylopairs is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with phylopairs.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_linreg_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 70> locations_array__ =
  {" (found before start of program)",
  " (in 'linreg', line 16, column 2 to column 17)",
  " (in 'linreg', line 17, column 2 to column 53)",
  " (in 'linreg', line 18, column 2 to column 71)",
  " (in 'linreg', line 19, column 2 to column 47)",
  " (in 'linreg', line 22, column 2 to column 15)",
  " (in 'linreg', line 50, column 2 to column 19)",
  " (in 'linreg', line 51, column 2 to column 19)",
  " (in 'linreg', line 27, column 4 to column 18)",
  " (in 'linreg', line 26, column 9 to line 28, column 3)",
  " (in 'linreg', line 25, column 4 to column 33)",
  " (in 'linreg', line 24, column 23 to line 26, column 3)",
  " (in 'linreg', line 24, column 2 to line 28, column 3)",
  " (in 'linreg', line 65, column 6 to column 52)",
  " (in 'linreg', line 66, column 6 to column 60)",
  " (in 'linreg', line 64, column 19 to line 67, column 5)",
  " (in 'linreg', line 64, column 4 to line 67, column 5)",
  " (in 'linreg', line 63, column 30 to line 68, column 3)",
  " (in 'linreg', line 63, column 9 to line 68, column 3)",
  " (in 'linreg', line 60, column 6 to column 68)",
  " (in 'linreg', line 61, column 6 to column 76)",
  " (in 'linreg', line 59, column 19 to line 62, column 5)",
  " (in 'linreg', line 59, column 4 to line 62, column 5)",
  " (in 'linreg', line 58, column 30 to line 63, column 3)",
  " (in 'linreg', line 58, column 9 to line 68, column 3)",
  " (in 'linreg', line 55, column 6 to column 52)",
  " (in 'linreg', line 56, column 6 to column 60)",
  " (in 'linreg', line 54, column 19 to line 57, column 5)",
  " (in 'linreg', line 54, column 4 to line 57, column 5)",
  " (in 'linreg', line 53, column 23 to line 58, column 3)",
  " (in 'linreg', line 53, column 2 to line 68, column 3)",
  " (in 'linreg', line 32, column 2 to column 36)",
  " (in 'linreg', line 42, column 4 to column 47)",
  " (in 'linreg', line 43, column 4 to column 50)",
  " (in 'linreg', line 44, column 4 to column 70)",
  " (in 'linreg', line 46, column 4 to column 35)",
  " (in 'linreg', line 41, column 30 to line 47, column 3)",
  " (in 'linreg', line 41, column 9 to line 47, column 3)",
  " (in 'linreg', line 38, column 4 to column 50)",
  " (in 'linreg', line 40, column 4 to column 80)",
  " (in 'linreg', line 37, column 30 to line 41, column 3)",
  " (in 'linreg', line 37, column 9 to line 47, column 3)",
  " (in 'linreg', line 34, column 4 to column 47)",
  " (in 'linreg', line 36, column 4 to column 35)",
  " (in 'linreg', line 33, column 23 to line 37, column 3)",
  " (in 'linreg', line 33, column 2 to line 47, column 3)",
  " (in 'linreg', line 2, column 2 to column 17)",
  " (in 'linreg', line 3, column 2 to column 17)",
  " (in 'linreg', line 4, column 9 to column 10)",
  " (in 'linreg', line 4, column 2 to column 14)",
  " (in 'linreg', line 5, column 9 to column 10)",
  " (in 'linreg', line 5, column 12 to column 13)",
  " (in 'linreg', line 5, column 2 to column 17)",
  " (in 'linreg', line 6, column 9 to column 10)",
  " (in 'linreg', line 6, column 12 to column 13)",
  " (in 'linreg', line 6, column 2 to column 18)",
  " (in 'linreg', line 7, column 2 to column 17)",
  " (in 'linreg', line 8, column 2 to column 24)",
  " (in 'linreg', line 9, column 2 to column 17)",
  " (in 'linreg', line 10, column 2 to column 15)",
  " (in 'linreg', line 11, column 2 to column 16)",
  " (in 'linreg', line 12, column 2 to column 15)",
  " (in 'linreg', line 13, column 2 to column 35)",
  " (in 'linreg', line 16, column 9 to column 10)",
  " (in 'linreg', line 17, column 28 to column 51)",
  " (in 'linreg', line 18, column 27 to column 69)",
  " (in 'linreg', line 19, column 9 to column 32)",
  " (in 'linreg', line 22, column 9 to column 10)",
  " (in 'linreg', line 50, column 9 to column 10)",
  " (in 'linreg', line 51, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_linreg final : public model_base_crtp<model_linreg> {
private:
  int N;
  int K;
  Eigen::Matrix<double,-1,1> Y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> Cp_data__;
  double coef_mean;
  double coef_sd;
  double sig2_mean;
  double sig2_sd;
  double sig2_loc;
  double sig2_sc;
  int model_type;
  int sigma_resid_1dim__;
  int sig2_scale_1dim__;
  int pair_effects_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Cp{nullptr, 0, 0};
public:
  ~model_linreg() {}
  model_linreg(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_linreg_namespace::model_linreg";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 46;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 47;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 49;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 52;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("Cp", "N", N);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("Cp", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "Cp", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      Cp_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Cp) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Cp_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> Cp_flat__;
        current_statement__ = 55;
        Cp_flat__ = context__.vals_r("Cp");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(Cp, Cp_flat__[(pos__ - 1)],
              "assigning variable Cp", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization", "coef_mean", "double",
        std::vector<size_t>{});
      coef_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 56;
      coef_mean = context__.vals_r("coef_mean")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization", "coef_sd", "double",
        std::vector<size_t>{});
      coef_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      coef_sd = context__.vals_r("coef_sd")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "coef_sd", coef_sd, 0);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "sig2_mean", "double",
        std::vector<size_t>{});
      sig2_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 58;
      sig2_mean = context__.vals_r("sig2_mean")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization", "sig2_sd", "double",
        std::vector<size_t>{});
      sig2_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 59;
      sig2_sd = context__.vals_r("sig2_sd")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization", "sig2_loc", "double",
        std::vector<size_t>{});
      sig2_loc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 60;
      sig2_loc = context__.vals_r("sig2_loc")[(1 - 1)];
      current_statement__ = 61;
      context__.validate_dims("data initialization", "sig2_sc", "double",
        std::vector<size_t>{});
      sig2_sc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 61;
      sig2_sc = context__.vals_r("sig2_sc")[(1 - 1)];
      current_statement__ = 62;
      context__.validate_dims("data initialization", "model_type", "int",
        std::vector<size_t>{});
      model_type = std::numeric_limits<int>::min();
      current_statement__ = 62;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "model_type",
        model_type, 1);
      current_statement__ = 62;
      stan::math::check_less_or_equal(function__, "model_type", model_type, 3);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("Coef", "K", K);
      current_statement__ = 64;
      sigma_resid_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      sigma_resid_1dim__ = (stan::math::logical_eq(model_type, 2) ? 0 : 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("sigma_resid",
        "model_type == 2 ? 0 : 1", sigma_resid_1dim__);
      current_statement__ = 65;
      sig2_scale_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      sig2_scale_1dim__ = ((stan::math::primitive_value(
                              stan::math::logical_eq(model_type, 2))
        ||
        stan::math::primitive_value(stan::math::logical_eq(model_type, 3))) ? 1 : 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("sig2_scale",
        "model_type == 2 || model_type == 3 ? 1 : 0", sig2_scale_1dim__);
      current_statement__ = 66;
      pair_effects_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 66;
      pair_effects_1dim__ = (stan::math::logical_eq(model_type, 3) ? N : 0);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("pair_effects",
        "model_type == 3 ? N : 0", pair_effects_1dim__);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("y_pred", "N", N);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("loglik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + sigma_resid_1dim__ + sig2_scale_1dim__ +
      pair_effects_1dim__;
  }
  inline std::string model_name() const final {
    return "model_linreg";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_linreg_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> Coef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      Coef = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      std::vector<local_scalar_t__> sigma_resid =
        std::vector<local_scalar_t__>(sigma_resid_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      sigma_resid = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      sigma_resid_1dim__);
      std::vector<local_scalar_t__> sig2_scale =
        std::vector<local_scalar_t__>(sig2_scale_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      sig2_scale = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     sig2_scale_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> pair_effects =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pair_effects_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      pair_effects = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(pair_effects_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 12;
      if (stan::math::logical_eq(model_type, 3)) {
        current_statement__ = 10;
        stan::model::assign(mu,
          stan::math::add(stan::math::multiply(X, Coef), pair_effects),
          "assigning variable mu");
      } else {
        current_statement__ = 8;
        stan::model::assign(mu, stan::math::multiply(X, Coef),
          "assigning variable mu");
      }
      {
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Coef, coef_mean,
                         coef_sd));
        current_statement__ = 45;
        if (stan::math::logical_eq(model_type, 1)) {
          current_statement__ = 42;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                           stan::model::rvalue(sigma_resid, "sigma_resid",
                             stan::model::index_uni(1)), sig2_loc, sig2_sc));
          current_statement__ = 43;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(Y, mu,
                           stan::model::rvalue(sigma_resid, "sigma_resid",
                             stan::model::index_uni(1))));
        } else {
          current_statement__ = 41;
          if (stan::math::logical_eq(model_type, 2)) {
            current_statement__ = 38;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(sig2_scale, "sig2_scale",
                               stan::model::index_uni(1)), sig2_mean, sig2_sd));
            current_statement__ = 39;
            lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(
                             Y, mu,
                             stan::math::multiply(
                               stan::math::sqrt(
                                 stan::model::rvalue(sig2_scale,
                                   "sig2_scale", stan::model::index_uni(1))),
                               stan::math::cholesky_decompose(Cp))));
          } else {
            current_statement__ = 37;
            if (stan::math::logical_eq(model_type, 3)) {
              current_statement__ = 32;
              lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                               stan::model::rvalue(sigma_resid,
                                 "sigma_resid", stan::model::index_uni(1)),
                               sig2_loc, sig2_sc));
              current_statement__ = 33;
              lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                               stan::model::rvalue(sig2_scale, "sig2_scale",
                                 stan::model::index_uni(1)), sig2_mean,
                               sig2_sd));
              current_statement__ = 34;
              lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                               pair_effects, stan::math::rep_vector(0, N),
                               stan::math::multiply(
                                 stan::model::rvalue(sig2_scale,
                                   "sig2_scale", stan::model::index_uni(1)),
                                 Cp)));
              current_statement__ = 35;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(Y, mu,
                               stan::model::rvalue(sigma_resid,
                                 "sigma_resid", stan::model::index_uni(1))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_linreg_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> Coef =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      Coef = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      std::vector<double> sigma_resid =
        std::vector<double>(sigma_resid_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma_resid = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      sigma_resid_1dim__);
      std::vector<double> sig2_scale =
        std::vector<double>(sig2_scale_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sig2_scale = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     sig2_scale_1dim__);
      Eigen::Matrix<double,-1,1> pair_effects =
        Eigen::Matrix<double,-1,1>::Constant(pair_effects_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      pair_effects = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(pair_effects_1dim__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(Coef);
      out__.write(sigma_resid);
      out__.write(sig2_scale);
      out__.write(pair_effects);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 12;
      if (stan::math::logical_eq(model_type, 3)) {
        current_statement__ = 10;
        stan::model::assign(mu,
          stan::math::add(stan::math::multiply(X, Coef), pair_effects),
          "assigning variable mu");
      } else {
        current_statement__ = 8;
        stan::model::assign(mu, stan::math::multiply(X, Coef),
          "assigning variable mu");
      }
      if (emit_transformed_parameters__) {
        out__.write(mu);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> y_pred =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> loglik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      if (stan::math::logical_eq(model_type, 1)) {
        current_statement__ = 28;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 25;
          stan::model::assign(y_pred,
            stan::math::normal_rng(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
              stan::model::rvalue(sigma_resid, "sigma_resid",
                stan::model::index_uni(1)), base_rng__),
            "assigning variable y_pred", stan::model::index_uni(n));
          current_statement__ = 26;
          stan::model::assign(loglik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
              stan::model::rvalue(sigma_resid, "sigma_resid",
                stan::model::index_uni(1))), "assigning variable loglik",
            stan::model::index_uni(n));
        }
      } else {
        current_statement__ = 24;
        if (stan::math::logical_eq(model_type, 2)) {
          current_statement__ = 22;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 19;
            stan::model::assign(y_pred,
              stan::math::normal_rng(
                stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                stan::math::sqrt(
                  (stan::model::rvalue(sig2_scale, "sig2_scale",
                     stan::model::index_uni(1)) *
                  stan::model::rvalue(Cp, "Cp", stan::model::index_uni(n),
                    stan::model::index_uni(n)))), base_rng__),
              "assigning variable y_pred", stan::model::index_uni(n));
            current_statement__ = 20;
            stan::model::assign(loglik,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                stan::math::sqrt(
                  (stan::model::rvalue(sig2_scale, "sig2_scale",
                     stan::model::index_uni(1)) *
                  stan::model::rvalue(Cp, "Cp", stan::model::index_uni(n),
                    stan::model::index_uni(n))))),
              "assigning variable loglik", stan::model::index_uni(n));
          }
        } else {
          current_statement__ = 18;
          if (stan::math::logical_eq(model_type, 3)) {
            current_statement__ = 16;
            for (int n = 1; n <= N; ++n) {
              current_statement__ = 13;
              stan::model::assign(y_pred,
                stan::math::normal_rng(
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                  stan::model::rvalue(sigma_resid, "sigma_resid",
                    stan::model::index_uni(1)), base_rng__),
                "assigning variable y_pred", stan::model::index_uni(n));
              current_statement__ = 14;
              stan::model::assign(loglik,
                stan::math::normal_lpdf<false>(
                  stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                  stan::model::rvalue(sigma_resid, "sigma_resid",
                    stan::model::index_uni(1))), "assigning variable loglik",
                stan::model::index_uni(n));
            }
          }
        }
      }
      out__.write(y_pred);
      out__.write(loglik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Coef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(Coef,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable Coef");
      out__.write(Coef);
      std::vector<local_scalar_t__> sigma_resid =
        std::vector<local_scalar_t__>(sigma_resid_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma_resid,
        in__.read<std::vector<local_scalar_t__>>(sigma_resid_1dim__),
        "assigning variable sigma_resid");
      out__.write_free_lb(0, sigma_resid);
      std::vector<local_scalar_t__> sig2_scale =
        std::vector<local_scalar_t__>(sig2_scale_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sig2_scale,
        in__.read<std::vector<local_scalar_t__>>(sig2_scale_1dim__),
        "assigning variable sig2_scale");
      out__.write_free_lb(0, sig2_scale);
      Eigen::Matrix<local_scalar_t__,-1,1> pair_effects =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pair_effects_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(pair_effects,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(pair_effects_1dim__),
        "assigning variable pair_effects");
      out__.write(pair_effects);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Coef", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_resid",
        "double",
        std::vector<size_t>{static_cast<size_t>(sigma_resid_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sig2_scale",
        "double",
        std::vector<size_t>{static_cast<size_t>(sig2_scale_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pair_effects",
        "double",
        std::vector<size_t>{static_cast<size_t>(pair_effects_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Coef =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Coef_flat__;
        current_statement__ = 1;
        Coef_flat__ = context__.vals_r("Coef");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(Coef, Coef_flat__[(pos__ - 1)],
            "assigning variable Coef", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(Coef);
      std::vector<local_scalar_t__> sigma_resid =
        std::vector<local_scalar_t__>(sigma_resid_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      sigma_resid = context__.vals_r("sigma_resid");
      out__.write_free_lb(0, sigma_resid);
      std::vector<local_scalar_t__> sig2_scale =
        std::vector<local_scalar_t__>(sig2_scale_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      sig2_scale = context__.vals_r("sig2_scale");
      out__.write_free_lb(0, sig2_scale);
      Eigen::Matrix<local_scalar_t__,-1,1> pair_effects =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pair_effects_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> pair_effects_flat__;
        current_statement__ = 4;
        pair_effects_flat__ = context__.vals_r("pair_effects");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= pair_effects_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(pair_effects, pair_effects_flat__[(pos__ - 1)],
            "assigning variable pair_effects", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(pair_effects);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Coef", "sigma_resid", "sig2_scale",
                "pair_effects"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_pred", "loglik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(sigma_resid_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sig2_scale_1dim__)},
                std::vector<size_t>{static_cast<size_t>(pair_effects_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "Coef" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_resid_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_resid" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sig2_scale_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig2_scale" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= pair_effects_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "pair_effects" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "loglik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "Coef" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_resid_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_resid" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sig2_scale_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig2_scale" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= pair_effects_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "pair_effects" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "loglik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Coef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_resid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_resid_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig2_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sig2_scale_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pair_effects\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(pair_effects_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Coef\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_resid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_resid_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig2_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sig2_scale_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pair_effects\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(pair_effects_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + sigma_resid_1dim__) +
      sig2_scale_1dim__) + pair_effects_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + sigma_resid_1dim__) +
      sig2_scale_1dim__) + pair_effects_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_linreg_namespace::model_linreg;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_linreg_namespace::profiles__;
}
#endif
#endif
